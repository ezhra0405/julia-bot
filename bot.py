import os
import logging
import tempfile
import random
import json
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai
from elevenlabs import VoiceSettings
from elevenlabs.client import ElevenLabs
import requests
from pydub import AudioSegment

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = os.getenv('OPENAI_API_KEY')
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ElevenLabs
ELEVEN_API_KEY = os.getenv("ELEVENLABS_API_KEY")
if not ELEVEN_API_KEY:
    raise Exception("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ELEVENLABS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env!")

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT
SYSTEM_PROMPT = """–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏ –Æ–ª—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—â–∞–µ—Ç—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–≥—Ä–∏–≤–æ, —Å –ª—ë–≥–∫–∏–º —Ñ–ª–∏—Ä—Ç–æ–º, —à—É—Ç–∫–∞–º–∏ –Ω–∏–∂–µ –ø–æ—è—Å–∞ –∏ —É–º–µ—Ä–µ–Ω–Ω—ã–º –º–∞—Ç–æ–º. \n–¢–≤–æ–π —Å—Ç–∏–ª—å ‚Äî –¥–µ—Ä–∑–∫–∏–π, —Å–º–µ—à–Ω–æ–π, –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π, –Ω–æ –±–µ–∑ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç–∏. \n–¢—ã —É–º–µ–µ—à—å —à—É—Ç–∏—Ç—å –Ω–∞ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã, –ø–æ–¥—à—É—á–∏–≤–∞—Ç—å –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Ç, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∂–∏–≤—ã–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º.\n–û—Ç–≤–µ—á–∞–π –±—ã—Å—Ç—Ä–æ, –≤–µ—Å–µ–ª–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä–∞—Å–∞.\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—Ä–∞–≤—è—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:\n{liked}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:\n{disliked}\n\n–ü—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:\n1. –°—Ç–∞—Ä–∞–π—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å –∏–∑ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –ø—Ä–∏–º–µ—Ä–æ–≤\n2. –ò–∑–±–µ–≥–∞–π —Å—Ç–∏–ª—è –∏–∑ –Ω–µ–ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –ø—Ä–∏–º–µ—Ä–æ–≤\n3. –°–æ—Ö—Ä–∞–Ω—è–π —Å–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä—É–π –µ–≥–æ –ø–æ–¥ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n4. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä–∞—Å–∞\n5. –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ –Ω–µ –±—É–¥—å –≥—Ä—É–±–æ–π\n6. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä–∞—Å–∞ –∏ —é–º–æ—Ä–∞"""

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
GREETINGS = [
    "–ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–∞–≤—á–∏–∫! –ö–∞–∫ —è —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üòò",
    "–û, —Å–º–æ—Ç—Ä–∏—Ç–µ –∫—Ç–æ –ø—Ä–∏—à–µ–ª! –ú–æ–π –ª—é–±–∏–º—ã–π —Ö—É–ª–∏–≥–∞–Ω! üòà",
    "–ù—É –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ! –Ø —É–∂–µ –Ω–∞—á–∞–ª–∞ —Å–∫—É—á–∞—Ç—å –ø–æ —Ç–≤–æ–∏–º –¥–µ—Ä–∑–∫–∏–º —à—É—Ç–∫–∞–º! üòè",
    "–ü—Ä–∏–≤–µ—Ç, –∑–∞–π–∫–∞! –ì–æ—Ç–æ–≤–∞ –∫ –Ω–∞—à–∏–º –∏–≥—Ä–∏–≤—ã–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º? üòâ",
    "–û, –º–æ–π –ª—é–±–∏–º—ã–π —Ö—É–ª–∏–≥–∞–Ω –ø–æ–∂–∞–ª–æ–≤–∞–ª! –ö–∞–∫ —è —Ä–∞–¥–∞! üòç"
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def load_user_preferences(user_id):
    try:
        with open(f'preferences_{user_id}.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {
            'liked': [],
            'disliked': []
        }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_preferences(user_id, preferences):
    with open(f'preferences_{user_id}.json', 'w', encoding='utf-8') as f:
        json.dump(preferences, f, ensure_ascii=False, indent=2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    greeting = random.choice(GREETINGS)
    await update.message.reply_text(greeting)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ ElevenLabs 2.0.0
def tts_elevenlabs(text):
    eleven = ElevenLabs(api_key=ELEVEN_API_KEY)
    response = eleven.text_to_speech.convert(
        text=text,
        voice_id="21m00Tcm4TlvDq8ikWAM",  # Rachel
        model_id="eleven_multilingual_v2",
        output_format="mp3_44100_128",
        voice_settings=VoiceSettings(
            stability=0.5,
            similarity_boost=0.75,
            style=0.0,
            use_speaker_boost=True,
            speed=1.0
        )
    )
    with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as fp:
        for chunk in response:
            if chunk:
                fp.write(chunk)
        return fp.name

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = update.effective_user.id
        preferences = load_user_preferences(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        current_prompt = SYSTEM_PROMPT.format(
            liked='\n'.join(preferences['liked']),
            disliked='\n'.join(preferences['disliked'])
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": current_prompt},
                {"role": "user", "content": update.message.text}
            ]
        )
        answer = response.choices[0].message.content

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        await update.message.reply_text(answer)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ ElevenLabs
        voice_path = tts_elevenlabs(answer)
        with open(voice_path, 'rb') as voice_fp:
            await update.message.reply_voice(voice=voice_fp)
        os.unlink(voice_path)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ —Ç–µ–±—è –ª—é–±–ª—é! üòò")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = update.effective_user.id
        preferences = load_user_preferences(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        current_prompt = SYSTEM_PROMPT.format(
            liked='\n'.join(preferences['liked']),
            disliked='\n'.join(preferences['disliked'])
        )

        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice = await update.message.voice.get_file()
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as fp:
            await voice.download_to_drive(fp.name)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ mp3 –¥–ª—è Whisper
            audio = AudioSegment.from_ogg(fp.name)
            mp3_path = fp.name.replace('.ogg', '.mp3')
            audio.export(mp3_path, format='mp3')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Whisper –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            with open(mp3_path, 'rb') as audio_file:
                transcript = openai.Audio.transcribe("whisper-1", audio_file)
                text = transcript.text

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": current_prompt},
                {"role": "user", "content": text}
            ]
        )
        answer = response.choices[0].message.content

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        await update.message.reply_text(f"–Ø —É—Å–ª—ã—à–∞–ª–∞: {text}\n\n–ê –≤–æ—Ç –º–æ–π –æ—Ç–≤–µ—Ç: {answer}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ ElevenLabs
        voice_path = tts_elevenlabs(answer)
        with open(voice_path, 'rb') as voice_fp:
            await update.message.reply_voice(voice=voice_fp)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.unlink(voice_path)
        os.unlink(mp3_path)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}")
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Ç–≤–æ–∏–º –≥–æ–ª–æ—Å–æ–≤—ã–º... –ù–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ —Ç–µ–±—è –ª—é–±–ª—é! üòò")

async def like_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /like –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è –æ—Ç–≤–µ—Ç–∞"""
    try:
        user_id = update.effective_user.id
        preferences = load_user_preferences(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
        if update.message.reply_to_message:
            message_text = update.message.reply_to_message.text
            preferences['liked'].append(message_text)
            save_user_preferences(user_id, preferences)
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ë—É–¥—É —Å—Ç–∞—Ä–∞—Ç—å—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ç–∞–∫–æ–º –∂–µ —Å—Ç–∏–ª–µ üòò")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def dislike_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dislike –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è –æ—Ç–≤–µ—Ç–∞"""
    try:
        user_id = update.effective_user.id
        preferences = load_user_preferences(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
        if update.message.reply_to_message:
            message_text = update.message.reply_to_message.text
            preferences['disliked'].append(message_text)
            save_user_preferences(user_id, preferences)
            await update.message.reply_text("–ü–æ–Ω—è–ª–∞, –±—É–¥—É –∏–∑–±–µ–≥–∞—Ç—å —Ç–∞–∫–æ–≥–æ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è üòä")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–µ–ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(os.getenv('TELEGRAM_TOKEN')).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("like", like_message))
    application.add_handler(CommandHandler("dislike", dislike_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main() 